/* Generated By:JavaCC: Do not edit this line. Jota.java */
import java.io.*;

public class Jota implements JotaConstants {

    public static void main(String args[]) throws ParseException, IOException {

        Jota lex = new Jota(new FileInputStream(args[0]));
        lex.Jota();
    }

  static final public void Jota() throws ParseException {
    Structure();
  }

  static final public void Structure() throws ParseException {
    MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ClassDeclaration();
    }
    jj_consume_token(0);
  }

  static final public void MainClass() throws ParseException {
    Token t;
    t = jj_consume_token(CLASS);
    Identifier();
    jj_consume_token(OBRACES);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(OPARENTHESES);
    jj_consume_token(STRING);
    jj_consume_token(OBRACKET);
    jj_consume_token(CBRACKET);
    Identifier();
    jj_consume_token(CPARENTHESES);
    jj_consume_token(OBRACES);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRACES:
      case IF:
      case WHILE:
      case SYSOUT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Statement();
    }
    jj_consume_token(CBRACES);
    jj_consume_token(CBRACES);
               System.out.println("MainClass: " + t.image + " line: " + t.beginLine);
  }

  static final public void ClassDeclaration() throws ParseException {
    Token t;
    t = jj_consume_token(CLASS);
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      Identifier();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(OBRACES);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      VarDeclaration();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      MethodDeclaration();
    }
    jj_consume_token(CBRACES);
                                                                        System.out.println("ClassDeclaration: " + t.image + " line: " + t.beginLine);
  }

  static final public void VarDeclaration() throws ParseException {
    Type();
    Identifier();
    jj_consume_token(SEMICOLON);
  }

  static final public void MethodDeclaration() throws ParseException {
    Token t;
    t = jj_consume_token(PUBLIC);
    Type();
    Identifier();
    jj_consume_token(OPARENTHESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case IDENTIFIER:
      Type();
      Identifier();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Type();
        Identifier();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(CPARENTHESES);
    jj_consume_token(OBRACES);
    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      VarDeclaration();
    }
    label_7:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_7;
      }
      Statement();
    }
    jj_consume_token(RETURN);
    Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(CBRACES);
               System.out.println("MethodDeclaration: " + t.image + " line: " + t.beginLine);
  }

  static final public void Type() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
      ArrayType();
                           System.out.println("Type: " + t.image + " line: " + t.beginLine);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                     System.out.println("Type: " + t.image + " line: " + t.beginLine);
      break;
    case IDENTIFIER:
      Identifier();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArrayType() throws ParseException {
     System.out.println("Array Type");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBRACKET:
      jj_consume_token(OBRACKET);
      jj_consume_token(CBRACKET);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void Statement() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBRACES:
      t = jj_consume_token(OBRACES);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBRACES:
        case IF:
        case WHILE:
        case SYSOUT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(CBRACES);
                                          System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      break;
    case IF:
      t = jj_consume_token(IF);
      jj_consume_token(OPARENTHESES);
      Expression();
      jj_consume_token(CPARENTHESES);
      Statement();
      jj_consume_token(ELSE);
      Statement();
                                                                                       System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      jj_consume_token(OPARENTHESES);
      Expression();
      jj_consume_token(CPARENTHESES);
      Statement();
                                                                          System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      break;
    case SYSOUT:
      t = jj_consume_token(SYSOUT);
      jj_consume_token(OPARENTHESES);
      Expression();
      jj_consume_token(CPARENTHESES);
      jj_consume_token(SEMICOLON);
                                                                          System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_3(2)) {
        Identifier();
        t = jj_consume_token(ASSIGNMENT);
        Expression();
        jj_consume_token(SEMICOLON);
                                                                           System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      } else if (jj_2_4(2)) {
        Identifier();
        t = jj_consume_token(OBRACKET);
        Expression();
        jj_consume_token(CBRACKET);
        jj_consume_token(ASSIGNMENT);
        Expression();
        jj_consume_token(SEMICOLON);
                                                                                                              System.out.println("Statement: " + t.image + " line: " + t.beginLine);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Expression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      /* Expression() ( <AND> | <LESSTHAN> | <PLUS> | <MINUS> | <MULTIPLIED> ) Expression()
          | Expression() <OBRACKET> Expression() <CBRACKET>
          | Expression() <DOT> <LENGTH>
          | Expression() <DOT> Identifier() <OPARENTHESES> ( Expression() ( <COMMA> Expression() )* )? <CPARENTHESES>
          | */
          t = jj_consume_token(INTEGER_LITERAL);
                           System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                  System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                   System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      break;
    case IDENTIFIER:
      Identifier();
      break;
    case THIS:
      t = jj_consume_token(THIS);
                  System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_5(2)) {
        t = jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(OBRACKET);
        Expression();
        jj_consume_token(CBRACKET);
                                                                       System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      } else if (jj_2_6(2)) {
        t = jj_consume_token(NEW);
        Identifier();
        jj_consume_token(OPARENTHESES);
        jj_consume_token(CPARENTHESES);
                                                                         System.out.println("Expression: " + t.image + " line: " + t.beginLine);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DENIAL:
          t = jj_consume_token(DENIAL);
          Expression();
                                 System.out.println("Expression: " + t.image + " line: " + t.beginLine);
          break;
        case OPARENTHESES:
          t = jj_consume_token(OPARENTHESES);
          Expression();
          jj_consume_token(CPARENTHESES);
                                                      System.out.println("Expression: " + t.image + " line: " + t.beginLine);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                      System.out.println("Identifier: " + t.image + " line: " + t.beginLine);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(OBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_12()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(OBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(SYSOUT)) return true;
    if (jj_scan_token(OPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(OPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(OBRACES)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CBRACES)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JotaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x4a004000,0x800,0x30000000,0x20,0x0,0x30000000,0x30000000,0x1000,0x4a004000,0x4a004000,0x680000,0x810000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x0,0x200,0x0,0x20,0x200,0x200,0x0,0x200,0x0,0x300,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jota(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jota(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JotaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jota(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JotaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jota(JotaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JotaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
