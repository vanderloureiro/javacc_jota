PARSER_BEGIN(Jota)

import java.io.*;

public class Jota {

    public static void main(String args[]) throws ParseException, IOException {

        Jota lex = new Jota(new FileInputStream(args[0]));
        lex.Jota();
    }

}

PARSER_END(Jota)

SKIP: {
    " " | "\t" | "\n" | "\r"
}

TOKEN : {
    <PUBLIC: "public">
    | <CLASS: "class">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <OBRACKET: "[">
    | <CBRACKET: "]">
    | <OBRACES: "{">
    | <CBRACES: "}">
    | <OPARENTHESES: "(">
    | <CPARENTHESES: ")">
    | <RETURN: "return">
    | <THIS: "this">
    | <NEW: "new">
    | <TRUE: "true">
    | <FALSE: "false">
    | <DENIAL: "!">
    | <AND: "&&">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <BOOLEAN: "boolean">
    | <INT: "int">
    | <SYSOUT: "System.out.println">
    | <ASSIGNMENT: "=">
    | <LESSTHAN: "<">
    | <PLUS: "+">
    | <MINUS: "-">
    | <MULTIPLIED: "*">
    | <SEMICOLON: ";">
    | <COMMA: ",">
    | <DOT: ".">
    | <LENGTH: "length">
    | <INTEGER_LITERAL: (["0"-"9"])+>
    | <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] ( ["a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}

void Jota(): 
{}
{
    Structure()
}

void Structure(): 
{} 
{
    MainClass() ( ClassDeclaration() )* <EOF>
}

void MainClass():
{
    Token t;
}
{
    t = <CLASS> Identifier() <OBRACES> 
        <PUBLIC> <STATIC> <VOID> <MAIN> 
            <OPARENTHESES> <STRING> <OBRACKET> <CBRACKET> Identifier() <CPARENTHESES>
        <OBRACES>(Statement())*<CBRACES>
    <CBRACES> {System.out.println("MainClass: " + t.image + " line: " + t.beginLine);}
}

void ClassDeclaration():
{
    Token t;
}
{
    t = <CLASS> Identifier() (<EXTENDS> Identifier())? 
        <OBRACES> (VarDeclaration())* (MethodDeclaration())* <CBRACES> {System.out.println("ClassDeclaration: " + t.image + " line: " + t.beginLine);}
}

void VarDeclaration():
{}
{
    Type() Identifier() <SEMICOLON> 
}

void MethodDeclaration():
{
    Token t;
}
{
    t = <PUBLIC> Type() Identifier() 
    <OPARENTHESES> 
        (Type() Identifier() (<COMMA> Type() Identifier())* )?
    <CPARENTHESES> 
    <OBRACES>
        (LOOKAHEAD(2) VarDeclaration())* (LOOKAHEAD(2) Statement())* <RETURN> Expression() <SEMICOLON>
    <CBRACES> {System.out.println("MethodDeclaration: " + t.image + " line: " + t.beginLine);}
}

void Type():
{
    Token t;
} 
{
    t = <INT> ArrayType() {System.out.println("Type: " + t.image + " line: " + t.beginLine);}
    | t = <BOOLEAN> {System.out.println("Type: " + t.image + " line: " + t.beginLine);}
    | Identifier() 
}

void ArrayType():
{}
{
    {System.out.println("Array Type");}
    (<OBRACKET> <CBRACKET>)? 
}

void Statement():
{
    Token t;
}
{
    t = <OBRACES>(Statement())*<CBRACES> {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
    | t = <IF><OPARENTHESES>Expression()<CPARENTHESES> Statement() <ELSE> Statement() {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
    | t = <WHILE> <OPARENTHESES> Expression() <CPARENTHESES> Statement() {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
    | t= <SYSOUT> <OPARENTHESES> Expression() <CPARENTHESES> <SEMICOLON> {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
    | LOOKAHEAD(2) Identifier() t = <ASSIGNMENT> Expression() <SEMICOLON> {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
    | LOOKAHEAD(2) Identifier() t = <OBRACKET> Expression() <CBRACKET> <ASSIGNMENT> Expression() <SEMICOLON> {System.out.println("Statement: " + t.image + " line: " + t.beginLine);}
}

void Expression():
{
    Token t;
}
{
    /* Expression() ( <AND> | <LESSTHAN> | <PLUS> | <MINUS> | <MULTIPLIED> ) Expression()
    | Expression() <OBRACKET> Expression() <CBRACKET>
    | Expression() <DOT> <LENGTH>
    | Expression() <DOT> Identifier() <OPARENTHESES> ( Expression() ( <COMMA> Expression() )* )? <CPARENTHESES>
    | */ 
    t = <INTEGER_LITERAL> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | t = <TRUE> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | t = <FALSE> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | Identifier()
    | t = <THIS> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | LOOKAHEAD(2) t = <NEW> <INT> <OBRACKET> Expression() <CBRACKET> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | LOOKAHEAD(2) t = <NEW> Identifier() <OPARENTHESES> <CPARENTHESES> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | t = <DENIAL> Expression() {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
    | t = <OPARENTHESES> Expression() <CPARENTHESES> {System.out.println("Expression: " + t.image + " line: " + t.beginLine);}
}


void Identifier():
{
    Token t;
}
{
    t = <IDENTIFIER> {System.out.println("Identifier: " + t.image + " line: " + t.beginLine);}
}



